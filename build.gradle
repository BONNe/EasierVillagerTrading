buildscript {
  repositories {
    jcenter({ url "http://jcenter.bintray.com/"})
    maven { url = "http://files.minecraftforge.net/maven" }
  }
  dependencies {
    classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
  }
}
apply plugin: 'net.minecraftforge.gradle.forge'


version = computeVersionName()
group = "de.guntram.mcmod.easiervillagertrading"
archivesBaseName = "easiervillagertrading"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
  sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
  version = "1.12.2-14.23.4.2705"
  runDir = "run"
  mappings = "snapshot_20171003"

  replace "{@version:mod}":version,"{@version:mc}":getVersion()
}

dependencies {
  // you may put jars on which you depend on in ./libs
  // or you may define them like so..
  //compile "some.group:artifact:version:classifier"
  //compile "some.group:artifact:version"

  // real examples
  //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
  //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

  // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
  //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
  // except that these dependencies get remapped to your current MCP mappings
  //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
  //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // for more info...
  // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
  // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
  // this will ensure that this task is redone when the versions change.
  inputs.property "version", project.version
  inputs.property "mcversion", project.minecraft.version

  // replace stuff in mcmod.info, nothing else
  from(sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'

    // replace version and mcversion
    expand 'version':project.version, 'mcversion':project.minecraft.version
  }

  // copy everything else except the mcmod.info
  from(sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }
}


static def computeVersionName() {
  if (System.env.BUILD_NUMBER) {
    return "2.0-SNAPSHOT-" + System.env.BUILD_NUMBER + "-MC-" + gitBranch()
  } else {
    return "2.0-MC-" + gitBranch()
  }
}

static def gitBranch() {
  def branch = ""
  def proc = "git rev-parse --abbrev-ref HEAD".execute()
  proc.in.eachLine { line -> branch = line }
  proc.err.eachLine { line -> println line }
  proc.waitFor()
  branch
}